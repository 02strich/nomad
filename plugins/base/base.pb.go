// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hashicorp/nomad/plugins/base/base.proto

package hashicorp_nomad_plugins_base

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import hclspec "hashicorp/nomad/plugins/shared/hclspec"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PluginType enumerates the type of plugins Nomad supports
type PluginType int32

const (
	PluginType_UNKNOWN PluginType = 0
	PluginType_DRIVER  PluginType = 1
	PluginType_DEVICE  PluginType = 2
)

var PluginType_name = map[int32]string{
	0: "UNKNOWN",
	1: "DRIVER",
	2: "DEVICE",
}
var PluginType_value = map[string]int32{
	"UNKNOWN": 0,
	"DRIVER":  1,
	"DEVICE":  2,
}

func (x PluginType) String() string {
	return proto.EnumName(PluginType_name, int32(x))
}
func (PluginType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_base_b0ba14970497002b, []int{0}
}

// PluginInfoResponse returns basic information about the plugin such
// that Nomad can decide whether to load the plugin or not.
type PluginInfoResponse struct {
	// type indicates what type of plugin this is.
	Type PluginType `protobuf:"varint,1,opt,name=type,proto3,enum=hashicorp.nomad.plugins.base.PluginType" json:"type,omitempty"`
	// plugin_api_version indicates the version of the Nomad Plugin API
	// this plugin is built against.
	PluginApiVersion string `protobuf:"bytes,2,opt,name=plugin_api_version,json=pluginApiVersion,proto3" json:"plugin_api_version,omitempty"`
	// plugin_version is the semver version of this individual plugin.
	// This is divorce from Nomadâ€™s development and versioning.
	PluginVersion string `protobuf:"bytes,3,opt,name=plugin_version,json=pluginVersion,proto3" json:"plugin_version,omitempty"`
	// name is the name of the plugin
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginInfoResponse) Reset()         { *m = PluginInfoResponse{} }
func (m *PluginInfoResponse) String() string { return proto.CompactTextString(m) }
func (*PluginInfoResponse) ProtoMessage()    {}
func (*PluginInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_base_b0ba14970497002b, []int{0}
}
func (m *PluginInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginInfoResponse.Unmarshal(m, b)
}
func (m *PluginInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginInfoResponse.Marshal(b, m, deterministic)
}
func (dst *PluginInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginInfoResponse.Merge(dst, src)
}
func (m *PluginInfoResponse) XXX_Size() int {
	return xxx_messageInfo_PluginInfoResponse.Size(m)
}
func (m *PluginInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PluginInfoResponse proto.InternalMessageInfo

func (m *PluginInfoResponse) GetType() PluginType {
	if m != nil {
		return m.Type
	}
	return PluginType_UNKNOWN
}

func (m *PluginInfoResponse) GetPluginApiVersion() string {
	if m != nil {
		return m.PluginApiVersion
	}
	return ""
}

func (m *PluginInfoResponse) GetPluginVersion() string {
	if m != nil {
		return m.PluginVersion
	}
	return ""
}

func (m *PluginInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ConfigSchemaResponse returns the plugins configuration schema.
type ConfigSchemaResponse struct {
	// spec is the plugins configuration schema
	Spec                 *hclspec.Spec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ConfigSchemaResponse) Reset()         { *m = ConfigSchemaResponse{} }
func (m *ConfigSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigSchemaResponse) ProtoMessage()    {}
func (*ConfigSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_base_b0ba14970497002b, []int{1}
}
func (m *ConfigSchemaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSchemaResponse.Unmarshal(m, b)
}
func (m *ConfigSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSchemaResponse.Marshal(b, m, deterministic)
}
func (dst *ConfigSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSchemaResponse.Merge(dst, src)
}
func (m *ConfigSchemaResponse) XXX_Size() int {
	return xxx_messageInfo_ConfigSchemaResponse.Size(m)
}
func (m *ConfigSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSchemaResponse proto.InternalMessageInfo

func (m *ConfigSchemaResponse) GetSpec() *hclspec.Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func init() {
	proto.RegisterType((*PluginInfoResponse)(nil), "hashicorp.nomad.plugins.base.PluginInfoResponse")
	proto.RegisterType((*ConfigSchemaResponse)(nil), "hashicorp.nomad.plugins.base.ConfigSchemaResponse")
	proto.RegisterEnum("hashicorp.nomad.plugins.base.PluginType", PluginType_name, PluginType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BasePluginClient is the client API for BasePlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BasePluginClient interface {
	// PluginInfo describes the type and version of a plugin.
	PluginInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PluginInfoResponse, error)
	// ConfigSchema returns the schema for parsing the plugins configuration.
	ConfigSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConfigSchemaResponse, error)
}

type basePluginClient struct {
	cc *grpc.ClientConn
}

func NewBasePluginClient(cc *grpc.ClientConn) BasePluginClient {
	return &basePluginClient{cc}
}

func (c *basePluginClient) PluginInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PluginInfoResponse, error) {
	out := new(PluginInfoResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.nomad.plugins.base.BasePlugin/PluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basePluginClient) ConfigSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConfigSchemaResponse, error) {
	out := new(ConfigSchemaResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.nomad.plugins.base.BasePlugin/ConfigSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasePluginServer is the server API for BasePlugin service.
type BasePluginServer interface {
	// PluginInfo describes the type and version of a plugin.
	PluginInfo(context.Context, *empty.Empty) (*PluginInfoResponse, error)
	// ConfigSchema returns the schema for parsing the plugins configuration.
	ConfigSchema(context.Context, *empty.Empty) (*ConfigSchemaResponse, error)
}

func RegisterBasePluginServer(s *grpc.Server, srv BasePluginServer) {
	s.RegisterService(&_BasePlugin_serviceDesc, srv)
}

func _BasePlugin_PluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasePluginServer).PluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.nomad.plugins.base.BasePlugin/PluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasePluginServer).PluginInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasePlugin_ConfigSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasePluginServer).ConfigSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.nomad.plugins.base.BasePlugin/ConfigSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasePluginServer).ConfigSchema(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BasePlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.nomad.plugins.base.BasePlugin",
	HandlerType: (*BasePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PluginInfo",
			Handler:    _BasePlugin_PluginInfo_Handler,
		},
		{
			MethodName: "ConfigSchema",
			Handler:    _BasePlugin_ConfigSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hashicorp/nomad/plugins/base/base.proto",
}

func init() {
	proto.RegisterFile("hashicorp/nomad/plugins/base/base.proto", fileDescriptor_base_b0ba14970497002b)
}

var fileDescriptor_base_b0ba14970497002b = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0x9b, 0xfe, 0x43, 0xff, 0x38, 0xd5, 0x12, 0x16, 0x91, 0x52, 0x3d, 0x94, 0x80, 0x58,
	0xa4, 0x6c, 0x34, 0xe2, 0xcd, 0x83, 0x5a, 0x73, 0x28, 0x42, 0x95, 0x54, 0x6b, 0x0f, 0x42, 0xd9,
	0xa6, 0xd3, 0x24, 0xd0, 0x64, 0x97, 0x6c, 0x2b, 0xf4, 0xb3, 0x79, 0xf5, 0x83, 0x49, 0x76, 0x9b,
	0xda, 0x83, 0x2d, 0x5e, 0x92, 0x61, 0xf7, 0xf7, 0x66, 0x67, 0xde, 0x83, 0xb3, 0x88, 0xc9, 0x28,
	0x0e, 0x78, 0x26, 0x9c, 0x94, 0x27, 0x6c, 0xe2, 0x88, 0xd9, 0x22, 0x8c, 0x53, 0xe9, 0x8c, 0x99,
	0x44, 0xf5, 0xa1, 0x22, 0xe3, 0x73, 0x4e, 0x4e, 0xd6, 0x20, 0x55, 0x20, 0x5d, 0x81, 0x34, 0x67,
	0x1a, 0xc7, 0x21, 0xe7, 0xe1, 0x0c, 0x1d, 0xc5, 0x8e, 0x17, 0x53, 0x07, 0x13, 0x31, 0x5f, 0x6a,
	0x69, 0xe3, 0x7a, 0xdb, 0x1b, 0x32, 0x62, 0x19, 0x4e, 0x9c, 0x28, 0x98, 0x49, 0x81, 0x41, 0xfe,
	0x1f, 0xe5, 0x85, 0x96, 0xd9, 0x9f, 0x06, 0x90, 0x67, 0x45, 0x76, 0xd3, 0x29, 0xf7, 0x51, 0x0a,
	0x9e, 0x4a, 0x24, 0x37, 0x60, 0xce, 0x97, 0x02, 0xeb, 0x46, 0xd3, 0x68, 0xd5, 0xdc, 0x16, 0xdd,
	0x35, 0x17, 0xd5, 0xfa, 0x97, 0xa5, 0x40, 0x5f, 0xa9, 0x48, 0x1b, 0x88, 0x06, 0x46, 0x4c, 0xc4,
	0xa3, 0x0f, 0xcc, 0x64, 0xcc, 0xd3, 0x7a, 0xb9, 0x69, 0xb4, 0xf6, 0x7c, 0x4b, 0xdf, 0xdc, 0x89,
	0x78, 0xa0, 0xcf, 0xc9, 0x29, 0xd4, 0x56, 0x74, 0x41, 0xfe, 0x53, 0xe4, 0x81, 0x3e, 0x2d, 0x30,
	0x02, 0x66, 0xca, 0x12, 0xac, 0x9b, 0xea, 0x52, 0xd5, 0xf6, 0x10, 0x0e, 0x3b, 0x3c, 0x9d, 0xc6,
	0x61, 0x3f, 0x88, 0x30, 0x61, 0xeb, 0xf1, 0x6f, 0xc1, 0xcc, 0x77, 0x54, 0xe3, 0x57, 0xdd, 0xf6,
	0xd6, 0xf1, 0xb5, 0x37, 0x74, 0xe5, 0x0d, 0xed, 0x0b, 0x0c, 0x7c, 0xa5, 0x3c, 0xbf, 0x04, 0xf8,
	0x59, 0x8b, 0x54, 0xe1, 0xff, 0x6b, 0xef, 0xb1, 0xf7, 0xf4, 0xd6, 0xb3, 0x4a, 0x04, 0xa0, 0xf2,
	0xe0, 0x77, 0x07, 0x9e, 0x6f, 0x19, 0xaa, 0xf6, 0x06, 0xdd, 0x8e, 0x67, 0x95, 0xdd, 0x2f, 0x03,
	0xe0, 0x9e, 0x49, 0xd4, 0x3a, 0x32, 0x2c, 0x3a, 0xe4, 0xc6, 0x92, 0x23, 0xaa, 0xc3, 0xa3, 0x45,
	0x78, 0xd4, 0xcb, 0xc3, 0x6b, 0x5c, 0xfc, 0xc5, 0xda, 0xcd, 0x68, 0xec, 0x12, 0x79, 0x87, 0xfd,
	0xcd, 0xad, 0xb7, 0xf6, 0x76, 0x77, 0xf7, 0xfe, 0xcd, 0x39, 0xbb, 0x34, 0xae, 0xa8, 0x2e, 0x57,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x73, 0x63, 0x9c, 0xc4, 0xb5, 0x02, 0x00, 0x00,
}
